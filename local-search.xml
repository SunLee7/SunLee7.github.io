<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>银杏大道</title>
    <link href="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/"/>
    <url>/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Where can I find the city of shining light in an ordinary world?</p></blockquote><span id="more"></span><p><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-06-23.png"><br><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-08-05.png"><br><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-08-13.png"><br><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-08-23.png"><br><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-08-33.png"><br><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-08-44.png"><br><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-08-54.png"><br><img src="/2022/11/19/%E9%93%B6%E6%9D%8F%E5%A4%A7%E9%81%93/2022-11-19-16-09-02.png"></p><blockquote><p>Shot on Olympus E-PL5 + Lumix 14mm F2.5</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Photo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZYNQ7000 SPI LCD与Petalinux</title>
    <link href="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/"/>
    <url>/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ZYNQ内部集成两个ARM Cortex A9核心，Xilinx也推出了Petalinux工具，与Vidado搭配可以方便地完成Linux的uboot、kernel、rootfs部署。<br>开发板上集成了HDMI，但是需要在FPGA中实现逻辑，但是实现之后占用了7010快一半的资源，多少有点离谱，而且HDMI还是不方便，所以就用linux内核中的fbtft驱动来实现显示，只占用了几个EMIO以及PS端的SPI即可实现。</p><blockquote><p>文中Vivado以及Petalinux版本均为v2018.3。</p></blockquote><h1 id="Vivado"><a href="#Vivado" class="headerlink" title="Vivado"></a>Vivado</h1><p>在上文的基础上在PS的ZYNQ7 Processing System中增加使能SD0，ETH0，QSPI Flash，视使用情况而定。<br>generate output products -&gt; create HDL wapper -&gt; Elaborated Design I&#x2F;O Ports -&gt; Generate Bitstream -&gt; Export Hardware（勾上include bitstream）。<br>启动一下SDK，在SDK的工作文件夹里找到system.hdf，拷出供Petalinux用。</p><h1 id="Petalinux"><a href="#Petalinux" class="headerlink" title="Petalinux"></a>Petalinux</h1><p>Petalinux必须在Linux中运行，Vidado可以在Linux和Windows下运行。</p><h2 id="Petalinux-Config"><a href="#Petalinux-Config" class="headerlink" title="Petalinux Config"></a>Petalinux Config</h2><p>安装玩Petalinx后，在每次打开终端之后要source一下petalinux安装目录下的setting.sh。<br>找一个目录新建vidado工程：<code>petalinux-create -t project --template zynq -n &lt;NAME&gt;</code><br>进工程目录在载入HDF硬件描述文件：<code>petalinux-config --get-hw-description=.</code><br>&#x3D;后面跟着的是hdf文件所在目录，如果就在当前目录下写个.就行。<br>此时会弹出petalinux的配置界面，一般没什么要改的，这里把根文件系统的形式改为SD card。<br>如果以后要更改这些设置就运行petalinux-config。<br><img src="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/2022-11-15-11-18-08.png"><br>Save保存，Exit退出。</p><h2 id="Kernel-Config"><a href="#Kernel-Config" class="headerlink" title="Kernel Config"></a>Kernel Config</h2><p>一般都要配置一下内核，主要涉及到一些驱动，不过Petalinux已经帮助配置了大部分功能了，直接编译也可以启动。<br><img src="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/2022-11-15-11-32-13.png"><br>因为板子上连接了一块LCD屏幕，所以这里使能一下fbtft，这是一个Staging Driver，可以把很多LCD配置成fbx显示器。具体位置在Device Drivers → Staging drivers → Support for small TFT LCD display modules，空格使能到[*]，即直接编译进内核，再进去使能对应LCD的型号。<br><img src="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/2022-11-15-11-39-45.png"><br>保存，退出。</p><h2 id="Device-Tree"><a href="#Device-Tree" class="headerlink" title="Device Tree"></a>Device Tree</h2><p>内核使能了驱动相应的功能，Linux ARM系统要把功能与设备连接起来还需要设备树。Petalinux工程的供用户修改设备树在&lt;工程目录&gt;&#x2F;project-spec&#x2F;meta-user&#x2F;recipes-bsp&#x2F;device-tree&#x2F;file&#x2F;下的system-user.dtsi文件夹内。还有一部分由Petalinx自动生成的设备树在&lt;用户目录&gt;&#x2F;components&#x2F;plnx_workspace&#x2F;device-tree&#x2F;device-tree&#x2F;下，从system-top.dts中可以看出来，用户可修改的设备树在最后，设备树有覆盖的功能呢，所以这里的设备树就不要动了，有需要添加的地方在system-user.dtsi中覆盖修改即可。<br>system-user.dtsi文件一般卖板子的会给模板，或者基于别的模板修改也行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c">/include/ <span class="hljs-string">&quot;system-conf.dtsi&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GPIO_ACTIVE_HIGH 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GPIO_ACTIVE_LOW  1</span><br>/ &#123;  <br>    model = <span class="hljs-string">&quot;Zybo Development Board&quot;</span>; <br>    compatible = <span class="hljs-string">&quot;zynq7010,zynq-7020&quot;</span>,<span class="hljs-string">&quot;xlnx,zynq-7000&quot;</span>;<br>    usb_phy0: phy0 &#123;<br>    compatible = <span class="hljs-string">&quot;ulpi-phy&quot;</span>;<br>    <span class="hljs-meta">#phy-cells = <span class="hljs-string">&lt;0&gt;</span>;</span><br>    reg = &lt;<span class="hljs-number">0xe0002000</span> <span class="hljs-number">0x1000</span>&gt;;<br>    view-port = &lt;<span class="hljs-number">0x170</span>&gt;;<br>    drv-vbus;<br>&#125;;<br>    leds &#123;<br>compatible = <span class="hljs-string">&quot;gpio-leds&quot;</span>;<br><br>gpio-led1 &#123;<br>label = <span class="hljs-string">&quot;led1&quot;</span>;<br>gpios = &lt;&amp;gpio0 <span class="hljs-number">56</span> GPIO_ACTIVE_HIGH&gt;;<br><span class="hljs-keyword">default</span>-state = <span class="hljs-string">&quot;off&quot;</span>;<br>&#125;;<br><br>gpio-led2 &#123;<br>label = <span class="hljs-string">&quot;led2&quot;</span>;<br>gpios = &lt;&amp;gpio0 <span class="hljs-number">57</span> GPIO_ACTIVE_HIGH&gt;;<br><span class="hljs-keyword">default</span>-state = <span class="hljs-string">&quot;on&quot;</span>;<br>&#125;;<br><br>gpio-led3 &#123;<br>label = <span class="hljs-string">&quot;led3&quot;</span>;<br>gpios = &lt;&amp;gpio0 <span class="hljs-number">58</span> GPIO_ACTIVE_HIGH&gt;;<br><span class="hljs-keyword">default</span>-state = <span class="hljs-string">&quot;off&quot;</span>;<br>&#125;;<br><br>gpio-led4 &#123;<br>label = <span class="hljs-string">&quot;led4&quot;</span>;<br>gpios = &lt;&amp;gpio0 <span class="hljs-number">59</span> GPIO_ACTIVE_HIGH&gt;;<br>linux,<span class="hljs-keyword">default</span>-trigger = <span class="hljs-string">&quot;heartbeat&quot;</span>;<br>&#125;;<br>&#125;;<br>&#125;;<br>&amp;usb0&#123;<br>    dr_mode = <span class="hljs-string">&quot;host&quot;</span>;<br>    usb-phy = &lt;&amp;usb_phy0&gt;;<br>&#125;;<br>&amp;spi0 &#123;<br>    st7789v@<span class="hljs-number">0</span> &#123;<br>        status = <span class="hljs-string">&quot;okay&quot;</span>;<br>        compatible = <span class="hljs-string">&quot;sitronix,st7789v&quot;</span>;<br>       reg = &lt;<span class="hljs-number">0</span>&gt;;<br>       spi-max-frequency =&lt;<span class="hljs-number">32000000</span>&gt;;        <span class="hljs-comment">//SPI时钟32M</span><br>       rotate =&lt;<span class="hljs-number">270</span>&gt;;<br>       spi-cpol;<br>       spi-cpha;<br>       rgb;                           <span class="hljs-comment">//颜色格式RGB</span><br>       fps =&lt;<span class="hljs-number">30</span>&gt;;                      <span class="hljs-comment">//刷新30帧率</span><br>       buswidth =&lt;<span class="hljs-number">8</span>&gt;;                   <span class="hljs-comment">//总线宽度8</span><br>        reset-gpios=&lt;&amp;gpio0 <span class="hljs-number">55</span> GPIO_ACTIVE_HIGH&gt;;   <span class="hljs-comment">//EMIO 55</span><br>       dc-gpios  =&lt;&amp;gpio0 <span class="hljs-number">54</span> GPIO_ACTIVE_LOW&gt;;   <span class="hljs-comment">//EMIO 54</span><br>    width = &lt;<span class="hljs-number">240</span>&gt;;<br>        height= &lt;<span class="hljs-number">320</span>&gt;;<br>       debug =&lt;<span class="hljs-number">0</span>&gt;;                     <span class="hljs-comment">//不开启调试</span><br>        &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这里主要添加了四个LED，再在SPI总线上添加LCD显示屏参数，LCD显示屏上还有reset和dc两个GPIO要根据需求添加，这里要注意reset-gpios要设置成GPIO_ACTIVE_HIGH，dc-gpios要设置成GPIO_ACTIVE_LOW。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>根文件系统就先不改啥了，直接运行<code>petalinux-build</code>编译。<br>system-user.dtsi写错了容易编译不通过，所以可以先不改system-user.dtsi编译，第一次通过之后再修改system-user.dtsi，然后只编译内核<code>petalinux-build -c kernel</code>。</p><h2 id="打包再烧录到SD-card"><a href="#打包再烧录到SD-card" class="headerlink" title="打包再烧录到SD card"></a>打包再烧录到SD card</h2><p>编译通过后要进行打包，这里应该是考虑到petalinux运行在不同的系统上有不同的启动方式，所以打包需要手动运行。<br><code>petalinux-package --boot --fsbl --fpga --uboot --force</code><br>最后的镜像文件在&lt;工程目录&gt;&#x2F;images&#x2F;linux&#x2F;下，fsbl、bitstream以及uboot封装在BOOT.BIN文件中，芯片上电之后即在SD card的第一个分区中寻找这个文件，然后依次加载运行。kernel内核镜像为image.ub中，如果在petalinux设置中不配置根文件系统在SD card那么根文件系统也会在这个镜像文件中，猜测这个镜像会加载到内存中，导致linux运行时对根文件系统的修改断电会丢失。<br>根文件系统打包在很多个压缩文件中，这里用rootfs.tar.gz。<br>把SD卡挂到Ubuntu里，先对SD卡进行分区，用脚本挺麻烦的，可以用gparted工具来进行分区，<code>sudo gparted</code>。<br>第一个分区为fat32格式，大小约为100M，能放得下BOOT.BIN和image.ub就行，命名Label为“BOOT”。<br>第二个分区为ext4格式，可以把SD卡剩下的空间都分进去，命名Label为“rootfs”。<br><img src="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/2022-11-15-13-08-24.png"><br>然后在images&#x2F;linux&#x2F;文件夹里执行以下脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>sudo <span class="hljs-built_in">rm</span> -rf /media/&lt;ubuntu用户&gt;/BOOT/*<br>sudo <span class="hljs-built_in">rm</span> -rf /media/&lt;ubuntu用户&gt;/rootfs/*<br>sudo <span class="hljs-built_in">cp</span> BOOT.BIN image.ub /media/&lt;ubuntu用户&gt;/BOOT/<br>sudo tar -zxvf rootfs.tar.gz -C /media/&lt;ubuntu用户&gt;/rootfs/<br>sudo umount /media/&lt;ubuntu用户&gt;/BOOT<br>sudo umount /media/&lt;ubuntu用户&gt;/rootfs<br></code></pre></td></tr></table></figure><p>完成后拔出SD卡。</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>把SD卡插到板子上设置为SD卡启动，上电，如果成功，linux启动串口会打印信息。<br><img src="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/2022-11-15-13-10-37.png"><br><img src="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/2022-11-15-13-11-29.png"><br>LCD上也会显示命令行运行。<br><img src="/2022/11/15/ZYNQ7000%E4%B8%8EPetalinux/20221115132855.jpg"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>fbtft实现之后，在系统中&#x2F;dev&#x2F;下即会出现fb0，即linux系统下的显示器，现在就可以在根文件系统中部署图形界面以及qt、lvgl等应用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ZYNQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZYNQ7000 SDK部署LVGL</title>
    <link href="/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/"/>
    <url>/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久没静下心来写博客了，学了一些新的东西但也没什么能写的出来的。对很多事情还是要一些热情的，以后会常更新博客，地址<a href="https://sunlee.top/">https://sunlee.top</a>，也算是对自己小小的督促。<br>前两天在ZYNQ上安装了个ST7789v的LCD，顺便写一下过程。<br><img src="/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/2022-11-14-19-39-05.png"></p><h1 id="LVGL"><a href="#LVGL" class="headerlink" title="LVGL"></a>LVGL</h1><p>LVGL官网<a href="https://lvgl.io/">https://lvgl.io/</a><br>一个开源的图形库，主要用于MCU上屏幕UI的部署，功能完善，封装合理，可裁切性强，当然也可以实现Linux上fbx的部署。以前在很多MCU上都实现过，比较熟悉，这次主要是要试一下ZYNQ的SPI EMIO以及LCD的驱动。</p><h1 id="Vivado"><a href="#Vivado" class="headerlink" title="Vivado"></a>Vivado</h1><p>这里用Vivado v2018.3，主要是因为跟着正点原子的教程走了，ZYNQ的使用离不开Xilinx某一套的全家桶。<br>ZYNQ系统上分PL以及PS两部分，手上的开发板居然PS一个IO都没留出来，全留的PL段接口，给我一开始不是很熟悉FPGA的人来说可是让我走了不少弯路。<br>既然PS端IO没留出来还要用PS端的SPI模块只能用EMIO引出了，ZYNQ上PS端的IO叫MIO，但是也可以用内部的FPGA来引出它的IO，叫EMIO，也勉强算是功能强大。<br>不过查了一下UG585手册，EMIO引出的SPI接口速度只能到25M，而PS端的MIO可以达到50M，问题不大。<br><img src="/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/2022-11-14-19-51-09.png"><br>Vidado上主要步骤有新建工程、在Block Design里添加ZYNQ7 Processing System（PS）、配置PS端内的DDR型号，添加使能SPI EMIO。<br><img src="/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/2022-11-14-19-54-16.png"><br>顺便添加一下串口，使能几个普通的EMIO来驱动LED。<br>退出来。<br>因为FPGA要设置IO管脚的，叫做管脚约束，所以要在GPIO以及SPI的接口上右键Make External，引出到顶层模块上。<br>完事之后在source的block design上右键，先generate output products再create HDL wapper，这样整个PS端就变成了一个.v文件，这里没有别的功能的话直接进Elaborated Design，在I&#x2F;O Ports里直接配置IO管脚。<br><img src="/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/2022-11-14-20-03-31.png"><br>最后直接Generate Bitstream，生成FPGA端的文件。<br>最后File&gt;Export&gt;Export Hardware，记得勾上include bitstream，完成PL端配置。</p><h1 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h1><h2 id="初始化外设"><a href="#初始化外设" class="headerlink" title="初始化外设"></a>初始化外设</h2><p>在vidado中file&gt;launch SDK。直接打开的话应该只会有一个design_1_wapper_hw_platform，在这个基础上要新建一个BSP工程，BSP板级支持包里面包含了要用到的一些库函数，最后新建一个应用工程。后面就是裸机C语言编程的内容了。<br>GPIO以及LCD初始化主要代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Lcd_Gpio_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>XGpioPs_Config *ConfigPtr;<br><br>ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);<br>XGpioPs_CfgInitialize(&amp;Gpio, ConfigPtr,ConfigPtr-&gt;BaseAddr);<br><br>XGpioPs_SetDirectionPin(&amp;Gpio, EMIO_LCD_CD, <span class="hljs-number">1</span>);<br>XGpioPs_SetOutputEnablePin(&amp;Gpio, EMIO_LCD_CD, <span class="hljs-number">1</span>);<br><br>XGpioPs_SetDirectionPin(&amp;Gpio, EMIO_LCD_RES, <span class="hljs-number">1</span>);<br>XGpioPs_SetOutputEnablePin(&amp;Gpio, EMIO_LCD_RES, <span class="hljs-number">1</span>);<br><br>XGpioPs_SetDirectionPin(&amp;Gpio, LED_1, <span class="hljs-number">1</span>);<br>XGpioPs_SetOutputEnablePin(&amp;Gpio, LED_1, <span class="hljs-number">1</span>);<br><br>XGpioPs_SetDirectionPin(&amp;Gpio, LED_2, <span class="hljs-number">1</span>);<br>XGpioPs_SetOutputEnablePin(&amp;Gpio, LED_2, <span class="hljs-number">1</span>);<br><br>XGpioPs_SetDirectionPin(&amp;Gpio, LED_3, <span class="hljs-number">1</span>);<br>XGpioPs_SetOutputEnablePin(&amp;Gpio, LED_3, <span class="hljs-number">1</span>);<br><br>XGpioPs_SetDirectionPin(&amp;Gpio, LED_4, <span class="hljs-number">1</span>);<br>XGpioPs_SetOutputEnablePin(&amp;Gpio, LED_4, <span class="hljs-number">1</span>);<br><br>XGpioPs_WritePin(&amp;Gpio, EMIO_LCD_CD, <span class="hljs-number">0</span>);<br>XGpioPs_WritePin(&amp;Gpio, EMIO_LCD_RES, <span class="hljs-number">0</span>);<br><br>XGpioPs_WritePin(&amp;Gpio, LED_1, <span class="hljs-number">1</span>);<br>XGpioPs_WritePin(&amp;Gpio, LED_2, <span class="hljs-number">1</span>);<br>XGpioPs_WritePin(&amp;Gpio, LED_3, <span class="hljs-number">0</span>);<br>XGpioPs_WritePin(&amp;Gpio, LED_4, <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Lcd_Spi_Init</span><span class="hljs-params">()</span>&#123;<br>XSpiPs_Config *SpiConfig;<br><br>SpiConfig = XSpiPs_LookupConfig(SPI_DEVICE_ID);<br>XSpiPs_CfgInitialize(&amp;SpiInstance, SpiConfig,<br>SpiConfig-&gt;BaseAddress);<br><br>XSpiPs_SetOptions(&amp;SpiInstance, XSPIPS_MASTER_OPTION |<br>   XSPIPS_FORCE_SSELECT_OPTION);<br>XSpiPs_SetClkPrescaler(&amp;SpiInstance, XSPIPS_CLK_PRESCALE_4);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delay</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i)</span>&#123;<br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> Delay;<br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> k;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;i;k++)<br><span class="hljs-keyword">for</span> (Delay = <span class="hljs-number">0</span>; Delay &lt; <span class="hljs-number">10000</span>; Delay++);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LCD_WR_DATA8</span><span class="hljs-params">(u8 dat)</span>&#123;<br>XGpioPs_WritePin(&amp;Gpio, EMIO_LCD_CD, <span class="hljs-number">1</span>);<br>XSpiPs_PolledTransfer(&amp;SpiInstance, &amp;dat, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LCD_WR_REG</span><span class="hljs-params">(u8 dat)</span>&#123;<br>XGpioPs_WritePin(&amp;Gpio, EMIO_LCD_CD, <span class="hljs-number">0</span>);<br>XSpiPs_PolledTransfer(&amp;SpiInstance, &amp;dat, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Lcd_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>  XGpioPs_WritePin(&amp;Gpio, EMIO_LCD_RES, <span class="hljs-number">0</span>);<br>  delay(<span class="hljs-number">10</span>);<br>  XGpioPs_WritePin(&amp;Gpio, EMIO_LCD_RES, <span class="hljs-number">1</span>);<br>  delay(<span class="hljs-number">10</span>);<br>  LCD_WR_REG(<span class="hljs-number">0x36</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x00</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0x3A</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x05</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xB2</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x0C</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x0C</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x00</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x33</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x33</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xB7</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x35</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xBB</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x19</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xC0</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x2C</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xC2</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x01</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xC3</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x12</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xC4</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x20</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xC6</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x0F</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xD0</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0xA4</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0xA1</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xE0</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0xD0</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x04</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x0D</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x11</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x13</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x2B</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x3F</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x54</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x4C</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x18</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x0D</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x0B</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x1F</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x23</span>);<br><br>  LCD_WR_REG(<span class="hljs-number">0xE1</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0xD0</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x04</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x0C</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x11</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x13</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x2C</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x3F</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x44</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x51</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x2F</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x1F</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x1F</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x20</span>);<br>  LCD_WR_DATA8(<span class="hljs-number">0x23</span>);<br><span class="hljs-comment">//  LCD_WR_REG(0x21); // 注释掉 不然颜色反的</span><br>  LCD_WR_REG(<span class="hljs-number">0x11</span>);<br>  LCD_WR_REG(<span class="hljs-number">0x29</span>);<br>  Address_set(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">240</span><span class="hljs-number">-1</span>,<span class="hljs-number">320</span><span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">240</span> * <span class="hljs-number">320</span>; i++)<br>  LCD_WR_DATA(BLACK);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">LCD_WR_DATA</span><span class="hljs-params">(u16 dat)</span><br>&#123;<br>u8 spi_dat[<span class="hljs-number">2</span>];<br>XGpioPs_WritePin(&amp;Gpio, EMIO_LCD_CD, <span class="hljs-number">1</span>);<br>    spi_dat[<span class="hljs-number">0</span>]=dat&gt;&gt;<span class="hljs-number">8</span>;<br>    spi_dat[<span class="hljs-number">1</span>]=dat;<br>    XSpiPs_PolledTransfer(&amp;SpiInstance, spi_dat, <span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Address_set</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x1,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> y1,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x2,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> y2)</span><br>&#123;<br>   LCD_WR_REG(<span class="hljs-number">0x2a</span>);<br>   LCD_WR_DATA8(x1&gt;&gt;<span class="hljs-number">8</span>);<br>   LCD_WR_DATA8(x1);<br>   LCD_WR_DATA8(x2&gt;&gt;<span class="hljs-number">8</span>);<br>   LCD_WR_DATA8(x2);<br>   LCD_WR_REG(<span class="hljs-number">0x2b</span>);<br>   LCD_WR_DATA8(y1&gt;&gt;<span class="hljs-number">8</span>);<br>   LCD_WR_DATA8(y1);<br>   LCD_WR_DATA8(y2&gt;&gt;<span class="hljs-number">8</span>);<br>   LCD_WR_DATA8(y2);<br>   LCD_WR_REG(<span class="hljs-number">0x2C</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LVGL-1"><a href="#LVGL-1" class="headerlink" title="LVGL"></a>LVGL</h2><p>从仓库克隆代码到应用工程的文件夹里。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone -b v8.<span class="hljs-number">3.3</span>  https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lvgl/</span>lvgl.git<br></code></pre></td></tr></table></figure><p>将文件夹里面的lv_conf_template.h拷出到外面一级文件夹改名为lv_conf.h，然后进去把第一行宏定义#if 0改为#if 1。<br>可能需要添加一些include目录，酌情处理。<br>最后目录结构如下：<br><img src="/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/2022-11-14-20-35-10.png"></p><h2 id="LVGL-Porting"><a href="#LVGL-Porting" class="headerlink" title="LVGL Porting"></a>LVGL Porting</h2><p>这部分内容lvgl做起来很简单，只要图形库与LCD驱动的部分衔接好就行。</p><h3 id="LCD"><a href="#LCD" class="headerlink" title="LCD"></a>LCD</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">my_lvgl_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>lv_init();<br><br><span class="hljs-comment">/*A static or global variable to store the buffers*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">lv_disp_draw_buf_t</span> disp_buf;<br><br><span class="hljs-comment">/*Static or global buffer(s). The second buffer is optional*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">lv_color_t</span> buf_1[MY_DISP_HOR_RES * <span class="hljs-number">10</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">lv_color_t</span> buf_2[MY_DISP_HOR_RES * <span class="hljs-number">10</span>];<br><br><span class="hljs-comment">/*Initialize `disp_buf` with the buffer(s). With only one buffer use NULL instead buf_2 */</span><br>lv_disp_draw_buf_init(&amp;disp_buf, buf_1, buf_2, MY_DISP_HOR_RES*<span class="hljs-number">10</span>);<br><br>lv_disp_drv_init(&amp;disp_drv);            <span class="hljs-comment">/*Basic initialization*/</span><br>disp_drv.draw_buf = &amp;disp_buf;          <span class="hljs-comment">/*Set an initialized buffer*/</span><br>disp_drv.flush_cb = my_flush_cb;        <span class="hljs-comment">/*Set a flush callback to draw to the display*/</span><br>disp_drv.hor_res = <span class="hljs-number">240</span>;                 <span class="hljs-comment">/*Set the horizontal resolution in pixels*/</span><br>disp_drv.ver_res = <span class="hljs-number">320</span>;                 <span class="hljs-comment">/*Set the vertical resolution in pixels*/</span><br><br><span class="hljs-type">lv_disp_t</span> * disp;<br>disp = lv_disp_drv_register(&amp;disp_drv); <span class="hljs-comment">/*Register the driver and save the created display objects*/</span><br><br>    <span class="hljs-comment">// 简单初始化个例程</span><br>lv_example_spinner_1();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">my_flush_cb</span><span class="hljs-params">(<span class="hljs-type">lv_disp_drv_t</span> * disp_drv, <span class="hljs-type">const</span> <span class="hljs-type">lv_area_t</span> * area, <span class="hljs-type">lv_color_t</span> * color_p)</span><br>&#123;<br>    <span class="hljs-comment">/*The most simple case (but also the slowest) to put all pixels to the screen one-by-one</span><br><span class="hljs-comment">     *`put_px` is just an example, it needs to be implemented by you.*/</span><br>    <span class="hljs-comment">// 画个窗</span><br>    Address_set(area-&gt;x1, area-&gt;y1, area-&gt;x2, area-&gt;y2);<br>    <span class="hljs-comment">// 向窗子里推像素颜色</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (area-&gt;x2 - area-&gt;x1 + <span class="hljs-number">1</span>) * (area-&gt;y2 - area-&gt;y1 + <span class="hljs-number">1</span>); i++)<br>    &#123;<br>    LCD_WR_DATA(color_p-&gt;full);<br>    color_p++;<br>    &#125;<br>    <span class="hljs-comment">/* IMPORTANT!!!</span><br><span class="hljs-comment">     * Inform the graphics library that you are ready with the flushing*/</span><br>    lv_disp_flush_ready(disp_drv);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>在主循环里面循环调用<code>lv_timer_handler();</code>，zynq裸机的延时5ms，这个延时准不准不重要<code>usleep(5000);</code>。</p><h3 id="定时器中断"><a href="#定时器中断" class="headerlink" title="定时器中断"></a>定时器中断</h3><p>定时器初始化以及服务函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> TIMER_DEVICE_ID     XPAR_XSCUTIMER_0_DEVICE_ID   <span class="hljs-comment">//定时器ID</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INTC_DEVICE_ID      XPAR_SCUGIC_SINGLE_DEVICE_ID <span class="hljs-comment">//中断ID</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TIMER_IRPT_INTR     XPAR_SCUTIMER_INTR           <span class="hljs-comment">//定时器中断ID</span></span><br><br><span class="hljs-comment">//私有定时器的时钟频率 = CPU时钟频率/2 = 333MHz</span><br><span class="hljs-comment">//0.2s闪烁一次,0.2*1000_000_000/(1000/333) - 1 = 3F83C3F</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TIMER_LOAD_VALUE333000 - 1<span class="hljs-comment">//0x3F83C3F</span></span><br><br>XScuGic Intc;               <span class="hljs-comment">//中断控制器驱动程序实例</span><br>XScuTimer Timer;            <span class="hljs-comment">//定时器驱动程序实例</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TimerIntrHandler</span><span class="hljs-params">(<span class="hljs-type">void</span> *CallBackRef)</span>;<br><br><span class="hljs-comment">//定时器中断初始化</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">timer_intr_init</span><span class="hljs-params">(XScuGic *intc_ptr,XScuTimer *timer_ptr)</span><br>&#123;<br>    <span class="hljs-comment">//初始化中断控制器</span><br>    XScuGic_Config *intc_cfg_ptr;<br>    intc_cfg_ptr = XScuGic_LookupConfig(INTC_DEVICE_ID);<br>    XScuGic_CfgInitialize(intc_ptr, intc_cfg_ptr,<br>            intc_cfg_ptr-&gt;CpuBaseAddress);<br>    <span class="hljs-comment">//设置并打开中断异常处理功能</span><br>    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,<br>            (Xil_ExceptionHandler)XScuGic_InterruptHandler, intc_ptr);<br>    Xil_ExceptionEnable();<br><br>    <span class="hljs-comment">//设置定时器中断</span><br>    XScuGic_Connect(intc_ptr, TIMER_IRPT_INTR,<br>          (Xil_ExceptionHandler)TimerIntrHandler, (<span class="hljs-type">void</span> *)timer_ptr);<br><br>    XScuGic_Enable(intc_ptr, TIMER_IRPT_INTR); <span class="hljs-comment">//使能GIC中的定时器中断</span><br>    XScuTimer_EnableInterrupt(timer_ptr);      <span class="hljs-comment">//使能定时器中断</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">time_isr_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-comment">//私有定时器初始化</span><br>    XScuTimer_Config *timer_cfg_ptr;<br>    XScuTimer *timer_ptr = &amp;Timer;<br>    timer_cfg_ptr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == timer_cfg_ptr)<br>        <span class="hljs-keyword">return</span> XST_FAILURE;<br>    status = XScuTimer_CfgInitialize(timer_ptr, timer_cfg_ptr,<br>            timer_cfg_ptr-&gt;BaseAddr);<br>    <span class="hljs-keyword">if</span> (status != XST_SUCCESS)<br>        <span class="hljs-keyword">return</span> XST_FAILURE;<br><br>    XScuTimer_LoadTimer(timer_ptr, TIMER_LOAD_VALUE); <span class="hljs-comment">// 加载计数周期</span><br>    XScuTimer_EnableAutoReload(timer_ptr);            <span class="hljs-comment">// 设置自动装载模式</span><br><br>    timer_intr_init(&amp;Intc,&amp;Timer);<br>    XScuTimer_Start(&amp;Timer);         <span class="hljs-comment">//启动定时器</span><br>    <span class="hljs-keyword">return</span> XST_SUCCESS;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TimerIntrHandler</span><span class="hljs-params">(<span class="hljs-type">void</span> *CallBackRef)</span><br>&#123;<br>XScuTimer *TimerInstancePtr = (XScuTimer *) CallBackRef;<br>    <span class="hljs-comment">// 让灯闪 确保中断初始化无误</span><br><span class="hljs-keyword">if</span>(XGpioPs_ReadPin(&amp;Gpio, LED_2))<br>XGpioPs_WritePin(&amp;Gpio, LED_2, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">else</span><br>XGpioPs_WritePin(&amp;Gpio, LED_2, <span class="hljs-number">1</span>);<br><br>lv_tick_inc(<span class="hljs-number">1</span>);<br><br>XScuTimer_ClearInterruptStatus(TimerInstancePtr);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>至此LVGL部署就完成了，主要要注意的是先把SPI以及LCD的驱动调通了，然后再部署LVGL，LVGL整个库功能很多，可以代替一部分操作系统的功能，可以多看看LVGL文档。<br><img src="/2022/11/14/ZYNQ7000-SDK%E9%83%A8%E7%BD%B2LVGL/2022-11-14-19-39-05.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ZYNQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西源大道-天润路</title>
    <link href="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/"/>
    <url>/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>浇上汽油 舒展眉头 纵火的青年 迫紧的时间</p></blockquote><span id="more"></span><p><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB100142.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB100150.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB110255.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB110257.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB110302.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB110311.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB110316.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB110328.jpg"><br><img src="/2022/11/14/%E8%A5%BF%E6%BA%90%E5%A4%A7%E9%81%93-%E5%A4%A9%E6%B6%A6%E8%B7%AF/PB120466.jpg"></p><blockquote><p>Shot on Olympus E-PL5 + Olympus 14-42mm, Lumix 14mm</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Photo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
